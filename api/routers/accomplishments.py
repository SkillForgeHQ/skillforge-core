# api/routers/accomplishments.py

from fastapi import APIRouter, Depends, HTTPException
from typing import List
import uuid

from api.dependencies import get_db
from api import graph_crud, schemas
from neo4j import Driver

router = APIRouter(
    prefix="/accomplishments",
    tags=["accomplishments"],
    responses={404: {"description": "Not found"}},
)


@router.post("/users/{email}/accomplishments", response_model=schemas.Accomplishment)
async def create_user_accomplishment(
    email: str,
    accomplishment: schemas.AccomplishmentCreate,
    db: Driver = Depends(get_db),
):
    """
    Create an accomplishment for a user.
    """
    with db.session() as session:
        try:
            created_accomplishment = session.write_transaction(
                graph_crud.create_accomplishment, email, accomplishment.model_dump()
            )
            if not created_accomplishment:
                raise HTTPException(status_code=404, detail="User not found or accomplishment creation failed")
            # Convert Neo4j Node to Pydantic model
            # The graph_crud.create_accomplishment function returns a Neo4j Node object.
            # We need to convert this to our Pydantic Accomplishment schema.
            # The `id` and `timestamp` are generated by the database.
            return schemas.Accomplishment(**created_accomplishment)
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
